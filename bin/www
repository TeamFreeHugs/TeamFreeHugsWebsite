#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TeamFreeHugsWebsite:server');
var http = require('http');
var https = require('https');
var nodemailer = require('nodemailer');
var fs = require('fs');

/**
 * Create HTTP global.server.
 */

var args = process.argv.slice(2);

var port;
if (args.indexOf('--port') == -1)
    port = 80; else
    port = parseInt(args[args.indexOf('--port') + 1]);

if (args.indexOf('--no-https') == -1) {
    var options = {
        key: fs.readFileSync(__dirname + '/../https/server.key'),
        cert: fs.readFileSync(__dirname + '/../https/server.crt')
    };
    global.httpsServer = https.createServer(options, app).listen(443);
    global.server = http.createServer(function (req, res) {
        res.writeHead(301, {Location: 'https://' + req.headers['host'] + req.url});
        res.end();
    });
    server.on('error', onError);
    server.on('listening', onListening);
    server.listen(port);
} else {
    global.server = http.createServer(app);
    server.on('error', onError);
    server.on('listening', onListening);
    server.listen(port);
}


fs.readFile('user-info.json', function (err, data) {
    if (err) {
        var args = process.argv.slice(2);
        if (args.indexOf('--no-signup-confirm') != -1) return;
        else throw err;
    }

    var userdata = JSON.parse(data);
    var required = ['username', 'password', 'service'];
    for (var z in required) if (typeof userdata[required[z]] === 'undefined') throw new Error('Field ' + required[z] + ' not present in user-info.json!');
    global.transporter = nodemailer.createTransport({
        service: userdata.service,
        auth: {
            user: userdata.username,
            pass: userdata.password
        }
    });
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = error.port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = global.server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
